[
    {
        "id": "d3f3e87db40f23f2",
        "type": "tab",
        "label": "Example Automation+Database",
        "disabled": false,
        "info": "This Nodered flow serves as an example for a simple automation between a sending and a receiving device. Received Data is saved to the database. ",
        "env": []
    },
    {
        "id": "bc6e5e89522e057e",
        "type": "function",
        "z": "d3f3e87db40f23f2",
        "name": "Prepare Data for Database",
        "func": "// Parse the incoming payload\nvar data = msg.payload;\n\n// Define measurement name\nvar measurement = \"smarthome\";\n\n// Define and add more tags here. \n// {tagname1:\"tagvalue1\", tagname2:\"tagvalue2\",}\nvar tags = {\n    location: \"living-room\"\n    // Add more tags as needed\n}\n\n// Dynamically build fields object from data properties\nvar fields = {};\nfor (var key in data) {\n    // Assuming all properties except 'timestamp' are fields\n    if (data.hasOwnProperty(key) && key !== 'timestamp') {\n        fields[key] = data[key];\n    }\n}\n\n// Use the timestamp from the MQTT message, converting to the correct precision if necessary\nvar timestamp = data.timestamp // * factor\n// Create a new message object to pass to the InfluxDB out node\nvar newMsg = {\n    payload: [\n        {\n            measurement: measurement,\n            fields: fields,\n            tags: tags,\n            timestamp: timestamp\n        }\n    ]\n};\n\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 100,
        "wires": [
            [
                "3abf2274a7e8bd49",
                "9c7e780f6bbbe30b"
            ]
        ]
    },
    {
        "id": "3abf2274a7e8bd49",
        "type": "influxdb batch",
        "z": "d3f3e87db40f23f2",
        "influxdb": "6ca8bde.9eb2f44",
        "precision": "",
        "retentionPolicy": "",
        "name": "Write to bucket",
        "database": "",
        "precisionV18FluxV20": "s",
        "retentionPolicyV18Flux": "",
        "org": "biomed-iot",
        "bucket": "user_bucket_name",
        "x": 710,
        "y": 100,
        "wires": []
    },
    {
        "id": "9c7e780f6bbbe30b",
        "type": "debug",
        "z": "d3f3e87db40f23f2",
        "name": "Database Payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 140,
        "wires": []
    },
    {
        "id": "e6f1667c22a83b03",
        "type": "mqtt in",
        "z": "d3f3e87db40f23f2",
        "name": "",
        "topic": "in/topic_id/temperature",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "4440ee1d27092426",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 220,
        "wires": [
            [
                "9bd87f7cdb02b432",
                "bc6e5e89522e057e",
                "e0dfda5173ab5de1"
            ]
        ]
    },
    {
        "id": "3824963e1a1549b5",
        "type": "mqtt out",
        "z": "d3f3e87db40f23f2",
        "name": "",
        "topic": "out/topic_id/heating",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "4440ee1d27092426",
        "x": 710,
        "y": 220,
        "wires": []
    },
    {
        "id": "9bd87f7cdb02b432",
        "type": "function",
        "z": "d3f3e87db40f23f2",
        "name": "Heating Automation Function",
        "func": "// Check if the temperature is below the threshold\nif (msg.payload.temperature < 19) {\n    // Temperature is below the threshold, turn on the heating\n    msg.payload = {\n        command: 1\n    };\n} else {\n    // Temperature is above the threshold, turn off the heating\n    msg.payload = {\n        command: 0\n    };\n}\n\n// Pass the message to the next node\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 220,
        "wires": [
            [
                "3824963e1a1549b5",
                "ba14eb49b32c20a1"
            ]
        ]
    },
    {
        "id": "ba14eb49b32c20a1",
        "type": "debug",
        "z": "d3f3e87db40f23f2",
        "name": "Outgoing Data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 280,
        "wires": []
    },
    {
        "id": "e0dfda5173ab5de1",
        "type": "debug",
        "z": "d3f3e87db40f23f2",
        "name": "Incoming Data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 340,
        "wires": []
    },
    {
        "id": "6ca8bde.9eb2f44",
        "type": "influxdb",
        "hostname": "localhost",
        "port": "8086",
        "protocol": "https",
        "database": "new_db",
        "name": "user_bucket_name",
        "usetls": true,
        "tls": "f7f39f4e.896ae",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "timeout": "",
        "rejectUnauthorized": false
    },
    {
        "id": "4440ee1d27092426",
        "type": "mqtt-broker",
        "name": "",
        "broker": "server_ip_or_domain",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "f7f39f4e.896ae",
        "type": "tls-config",
        "name": "local-tls",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "verifyservercert": false
    }
]