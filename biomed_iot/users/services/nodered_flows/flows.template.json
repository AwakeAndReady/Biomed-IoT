[
    {
        "id": "d3f3e87db40f23f2",
        "type": "tab",
        "label": "Example Flow",
        "disabled": false,
        "info": "This Node-RED flow...\n\n1) serves as an example for a simple \nautomation between a sending and a \nreceiving device. \nReceived data is saved to the database. \n\n2) saves the status of all devices \nto the database",
        "env": []
    },
    {
        "id": "bc6e5e89522e057e",
        "type": "function",
        "z": "d3f3e87db40f23f2",
        "name": "Prepare Data for Database",
        "func": "/////// USER INPUT SECTION ///////\n\n// Mandatory: Define your measurement name\nvar measurement = \"gateway-cpu-temp\";\n\n/////// END OF USER INPUT SECTION ///////\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n///// DO NOT CHANGE CODE BELOW /////\n// This script is to store any device status that is received\n\n// Parse the incoming payload\nvar data = msg.payload;\n\n// Build array of points\nvar points = [];\nfor (var key in data) {\n    if (data.hasOwnProperty(key) && key !== \"timestamp\") {\n        var point = {\n            measurement: measurement,\n            fields: {},\n            tags: {}\n        };\n        point.fields[key] = data[key];\n        point.tags.fieldname = key;\n        if (data.timestamp) {\n            point.timestamp = data.timestamp;\n        }\n        points.push(point);\n    }\n}\n\n// Set payload to array of points\nmsg.payload = points;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 80,
        "wires": [
            [
                "3abf2274a7e8bd49",
                "9c7e780f6bbbe30b"
            ]
        ]
    },
    {
        "id": "3abf2274a7e8bd49",
        "type": "influxdb batch",
        "z": "d3f3e87db40f23f2",
        "influxdb": "6ca8bde.9eb2f44",
        "precision": "",
        "retentionPolicy": "",
        "name": "Write to InfluxDB Database",
        "database": "",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "${INFLUXDB_ORG}",
        "bucket": "${INFLUXDB_BUCKET}",
        "x": 800,
        "y": 80,
        "wires": []
    },
    {
        "id": "9c7e780f6bbbe30b",
        "type": "debug",
        "z": "d3f3e87db40f23f2",
        "name": "Database Payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 120,
        "wires": []
    },
    {
        "id": "e6f1667c22a83b03",
        "type": "mqtt in",
        "z": "d3f3e87db40f23f2",
        "name": "Gateway CPU Temperature",
        "topic": "in/MQTT_TOPIC_ID/your_gateway_name/cputemp",
        "qos": "2",
        "datatype": "json",
        "broker": "4440ee1d27092426",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 160,
        "wires": [
            [
                "9bd87f7cdb02b432",
                "bc6e5e89522e057e",
                "e0dfda5173ab5de1"
            ]
        ]
    },
    {
        "id": "3824963e1a1549b5",
        "type": "mqtt out",
        "z": "d3f3e87db40f23f2",
        "name": "Publish to Gateway Alert Topic",
        "topic": "out/MQTT_TOPIC_ID/your_gateway_name/alert",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "4440ee1d27092426",
        "x": 810,
        "y": 160,
        "wires": []
    },
    {
        "id": "9bd87f7cdb02b432",
        "type": "function",
        "z": "d3f3e87db40f23f2",
        "name": "CPU Temperature Automation",
        "func": "// Check if the cpu temperature is above the threshold\nif (msg.payload.cputemp > 80) {\n    // Temperature is above the threshold, send alarm signal\n    msg.payload = {\n        command: 1\n    };\n} else {\n    // Temperature is below the threshold\n    msg.payload = {command: 0};\n}\n\n// Pass the message to the next node\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 160,
        "wires": [
            [
                "3824963e1a1549b5",
                "ba14eb49b32c20a1"
            ]
        ]
    },
    {
        "id": "ba14eb49b32c20a1",
        "type": "debug",
        "z": "d3f3e87db40f23f2",
        "name": "Outgoing Data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 220,
        "wires": []
    },
    {
        "id": "e0dfda5173ab5de1",
        "type": "debug",
        "z": "d3f3e87db40f23f2",
        "name": "Incoming Data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 220,
        "wires": []
    },
    {
        "id": "5af153bd677ef8aa",
        "type": "comment",
        "z": "d3f3e87db40f23f2",
        "name": "About this flow",
        "info": "This Node-RED flow...\n\n- Serves as an example for a simple \nautomation between a sending and a \nreceiving device. \n\n- Received temperature data is saved \nto the database. \n\n- saves the status of all devices \nto the database\n",
        "x": 100,
        "y": 40,
        "wires": []
    },
    {
        "id": "3c02408c71d407d7",
        "type": "mqtt in",
        "z": "d3f3e87db40f23f2",
        "name": "Device Status",
        "topic": "in/MQTT_TOPIC_ID/devicestatus",
        "qos": "2",
        "datatype": "json",
        "broker": "4440ee1d27092426",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 90,
        "y": 540,
        "wires": [
            [
                "4d34d31fc3543816",
                "5e9882b8911b425e"
            ]
        ]
    },
    {
        "id": "4d34d31fc3543816",
        "type": "debug",
        "z": "d3f3e87db40f23f2",
        "name": "All Incoming Device Status Data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 580,
        "wires": []
    },
    {
        "id": "5e9882b8911b425e",
        "type": "function",
        "z": "d3f3e87db40f23f2",
        "name": "Prepare Data for Database",
        "func": "///// STOP, DO NOT CHANGE THIS SCRIPT /////\n/* This script is to store any device status that is received */\n\n\n\n\n\n\n\n\n\n// Parse the incoming payload\nvar data = msg.payload;\nvar deviceName = Object.keys(data)[0];\n\n// Mandatory: Define measurement name\nvar measurement = \"devicestatus\";\n\n// Optional: Define tags here.\nvar tags = {\n    // devicename as tagname\n    \"devicename\": deviceName\n}\n\n// Dynamically build fields object from data properties\nvar fields = {};\nfor (var key in data) {\n    // Assuming all properties except 'timestamp' are fields\n    if (data.hasOwnProperty(key) && key !== 'timestamp') {\n        // Ensure the value is 1\n        if (data[key] === 1) {\n            fields[key] = data[key];\n        } else {\n            // If the value is not 1, you can either skip or handle it\n            return null; // Discard this message if the value is not 1\n        }\n    }\n}\n\n// Create a new message object to pass to the InfluxDB out node\nvar newMsg = {\n    payload: [\n        {\n            measurement: measurement,\n            fields: fields,\n            //tags: tags,\n        }\n    ]\n};\n\n// Add tags to the payload if they are not empty\nif (Object.keys(tags).length > 0) {\n    newMsg.payload[0].tags = tags;\n}\n\n// Add timestamp if it exists\nif (data.timestamp) {\n    newMsg.payload[0].timestamp = data.timestamp; // * factor if necessary\n}\n\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 540,
        "wires": [
            [
                "cf424ab563c25673",
                "5fcf96aad506ae2a"
            ]
        ]
    },
    {
        "id": "cf424ab563c25673",
        "type": "influxdb batch",
        "z": "d3f3e87db40f23f2",
        "influxdb": "6ca8bde.9eb2f44",
        "precision": "",
        "retentionPolicy": "",
        "name": "Write to InfluxDB Database",
        "database": "",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "${INFLUXDB_ORG}",
        "bucket": "${INFLUXDB_BUCKET}",
        "x": 800,
        "y": 540,
        "wires": []
    },
    {
        "id": "5fcf96aad506ae2a",
        "type": "debug",
        "z": "d3f3e87db40f23f2",
        "name": "Database Payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 580,
        "wires": []
    },
    {
        "id": "6b323d737999fa19",
        "type": "mqtt in",
        "z": "d3f3e87db40f23f2",
        "name": "ESP32 Temperature",
        "topic": "in/MQTT_TOPIC_ID/esp32/temperature",
        "qos": "2",
        "datatype": "json",
        "broker": "4440ee1d27092426",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 380,
        "wires": [
            [
                "1df590d2315a1e74",
                "f4dc2ad0358ce44a",
                "4e992909a3a9c7d9"
            ]
        ]
    },
    {
        "id": "1df590d2315a1e74",
        "type": "debug",
        "z": "d3f3e87db40f23f2",
        "name": "Incoming Data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 440,
        "wires": []
    },
    {
        "id": "c2e8d63e7981a786",
        "type": "mqtt out",
        "z": "d3f3e87db40f23f2",
        "name": "Publish to ESP32 Alert Topic",
        "topic": "out/MQTT_TOPIC_ID/esp32/alert",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "4440ee1d27092426",
        "x": 800,
        "y": 380,
        "wires": []
    },
    {
        "id": "98f4fa752f4c47fb",
        "type": "comment",
        "z": "d3f3e87db40f23f2",
        "name": "double click here!",
        "info": "This cpu temperature sub-flow works only when \nyou have set up a Biomed IoT Gateway.\n\nTo make the flow work:\nIn the CPU Temp example's mqtt-in node,\nsubstitute 'your_gateway_name' in the\ntopic structure with your gateway name,\nyou used during gateway setup.\nIt should be the device name on the\n\"Device List\" page if you used this name.",
        "x": 200,
        "y": 200,
        "wires": []
    },
    {
        "id": "f4dc2ad0358ce44a",
        "type": "function",
        "z": "d3f3e87db40f23f2",
        "name": "Temperature Automation",
        "func": "// Check if the fridge temperature is above the threshold\nif (msg.payload.temperature > 8) {\n    // Temperature is above the threshold, send alarm signal\n    msg.payload = {\n        command: 1\n    };\n} else {\n    // Temperature is below the threshold\n    msg.payload = { command: 0 };\n}\n\n// Pass the message to the next node\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 380,
        "wires": [
            [
                "c2e8d63e7981a786",
                "e771891a075bcfd7"
            ]
        ]
    },
    {
        "id": "f085006573b41370",
        "type": "comment",
        "z": "d3f3e87db40f23f2",
        "name": "Receive and Save Device Status",
        "info": "",
        "x": 150,
        "y": 500,
        "wires": []
    },
    {
        "id": "3b38fa117baead33",
        "type": "comment",
        "z": "d3f3e87db40f23f2",
        "name": "Receive and Save Temperature Data",
        "info": "",
        "x": 160,
        "y": 340,
        "wires": []
    },
    {
        "id": "71649cc8b7654d5a",
        "type": "comment",
        "z": "d3f3e87db40f23f2",
        "name": "Receive and Save Gateway CPU Temp.",
        "info": "",
        "x": 170,
        "y": 120,
        "wires": []
    },
    {
        "id": "4e992909a3a9c7d9",
        "type": "function",
        "z": "d3f3e87db40f23f2",
        "name": "Prepare Data for Database",
        "func": "/////// USER INPUT SECTION ///////\n\n// Mandatory: Define your measurement name\nvar measurement = \"esp32-temp2\";\n\n/////// END OF USER INPUT SECTION ///////\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n///// DO NOT CHANGE CODE BELOW /////\n// This script is to store any device status that is received\n\n// Parse the incoming payload\nvar data = msg.payload;\n\n// Build array of points\nvar points = [];\nfor (var key in data) {\n    if (data.hasOwnProperty(key) && key !== \"timestamp\") {\n        var point = {\n            measurement: measurement,\n            fields: {},\n            tags: {}\n        };\n        point.fields[key] = data[key];\n        point.tags.fieldname = key;\n        if (data.timestamp) {\n            point.timestamp = data.timestamp;\n        }\n        points.push(point);\n    }\n}\n\n// Set payload to array of points\nmsg.payload = points;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 300,
        "wires": [
            [
                "90e3dee39fafe7b1",
                "f3ccac46ec9f34c2"
            ]
        ]
    },
    {
        "id": "90e3dee39fafe7b1",
        "type": "influxdb batch",
        "z": "d3f3e87db40f23f2",
        "influxdb": "6ca8bde.9eb2f44",
        "precision": "",
        "retentionPolicy": "",
        "name": "Write to InfluxDB Database",
        "database": "",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "${INFLUXDB_ORG}",
        "bucket": "${INFLUXDB_BUCKET}",
        "x": 800,
        "y": 300,
        "wires": []
    },
    {
        "id": "f3ccac46ec9f34c2",
        "type": "debug",
        "z": "d3f3e87db40f23f2",
        "name": "Database Payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 340,
        "wires": []
    },
    {
        "id": "e771891a075bcfd7",
        "type": "debug",
        "z": "d3f3e87db40f23f2",
        "name": "Outgoing Data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 440,
        "wires": []
    },
    {
        "id": "192338678e6b8f35",
        "type": "mqtt in",
        "z": "d3f3e87db40f23f2",
        "name": "MQTT Inout Topic (ask site admin how to use)",
        "topic": "inout/MQTT_TOPIC_ID/test",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "5f3a9b2d8c714e09",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "f14be28f6d3bdc26",
        "type": "comment",
        "z": "d3f3e87db40f23f2",
        "name": "Important Notes about inout/-Topic",
        "info": "**MQTT inout/-topic e.g. for Shelly plugs**\n1. Create MQTT credentials for this node \non the Devices page (ask site admin). Use the name \"nodered\".\n2. Enter the credentials in the mqtt-in \nnode below\n\n**CAUTION**: Do not publish and subscribe to \nthe same inout/... subtopic (especially avoid\nthe use of topic wildcards like \"#\" and \"+\").\nThis will cause infinite message loops and \nwill overload the mqtt broker.\n",
        "x": 150,
        "y": 620,
        "wires": []
    },
    {
        "id": "e2a28a9d6b55959a",
        "type": "comment",
        "z": "d3f3e87db40f23f2",
        "name": "Help with Database Node",
        "info": "Time precision is set to ms.\nIf you need seconds or nanoseconds,\nset change it accordingly.\nAlways make sure you set it to the unit \nwhich matches your data!",
        "x": 790,
        "y": 40,
        "wires": []
    },
    {
        "id": "6ca8bde.9eb2f44",
        "type": "influxdb",
        "hostname": "${INFLUXDB_HOST}",
        "port": "${INFLUXDB_PORT}",
        "protocol": "${INFLUXDB_PROTOCOL}",
        "database": "new_db",
        "name": "Write to InfluxDB Database",
        "usetls": false,
        "tls": "f7f39f4e.896ae",
        "influxdbVersion": "2.0",
        "url": "${INFLUXDB_URL}",
        "timeout": "",
        "rejectUnauthorized": false,
        "credentials": {
            "token": "${INFLUXDB_TOKEN}"
        }
    },
    {
        "id": "4440ee1d27092426",
        "type": "mqtt-broker",
        "name": "in->out mqtt broker",
        "broker": "${MQTT_HOST}",
        "port": "${MQTT_PORT}",
        "tls": "",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": "",
        "credentials": {
            "user": "${MQTT_USERNAME}",
            "password": "${MQTT_PASSWORD}"
        }
    },
    {
        "id": "5f3a9b2d8c714e09",
        "type": "mqtt-broker",
        "name": "inout mqtt broker",
        "broker": "${MQTT_HOST}",
        "port": "${MQTT_PORT}",
        "tls": "",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": "",
        "credentials": {
            "user": "MQTT_INOUT_USERNAME",
            "password": "MQTT_INOUT_PASSWORD"
        }
    },
    {
        "id": "f7f39f4e.896ae",
        "type": "tls-config",
        "name": "local-tls",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "verifyservercert": false
    }
]