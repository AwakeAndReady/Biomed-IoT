///// STOP, DO NOT CHANGE THIS SCRIPT /////
/* This script is to store any device status that is received */











///// DO NOT CHANGE CODE BELOW /////
// Parse the incoming payload
var data = msg.payload;
var deviceName = Object.keys(data)[0];

// Mandatory: Define measurement name
var measurement = "devicestatus";

// Optional: Define tags here.
var tags = {
    // devicename as tagname
    "devicename": deviceName
}

// Dynamically build fields object from data properties
var fields = {};
for (var key in data) {
    // Assuming all properties except 'timestamp' are fields
    if (data.hasOwnProperty(key) && key !== 'timestamp') {
        // Ensure the value is defined, not null, not an empty string, and equal to 1
        if (data[key] !== null && data[key] !== undefined && data[key] !== "" && data[key] === 1) {
            fields[key] = data[key]; // Add the valid field to fields object
        } else {
            // If the value is invalid or not 1, discard this message
            return null; // Discard the message
        }
    }
}

// Create a new message object to pass to the InfluxDB out node
var newMsg = {
    payload: [
        {
            measurement: measurement,
            fields: fields,
        }
    ]
};

// Add tags to the payload if they are not empty
if (Object.keys(tags).length > 0) {
    newMsg.payload[0].tags = tags;
}

// Add timestamp if it exists
if (data.timestamp) {
    newMsg.payload[0].timestamp = data.timestamp; // * factor if necessary
}

// Only return the newMsg if there are valid fields to write
if (Object.keys(fields).length > 0) {
    return newMsg;
} else {
    node.warn("No valid fields to send to InfluxDB.");
    return null;
}
